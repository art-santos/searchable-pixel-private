{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * @split.dev/analytics\n * Simple AI crawler tracking for any website\n * Zero external dependencies, lightweight, reliable\n */\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\nexport interface SplitConfig {\n  /** Your Split Analytics API key */\n  apiKey: string\n  /** Custom API endpoint (optional) */\n  apiEndpoint?: string\n  /** Enable debug logging */\n  debug?: boolean\n}\n\nexport interface PingResponse {\n  status: 'ok' | 'error'\n  message?: string\n  connection?: {\n    authenticated: boolean\n    keyName: string\n    workspace: string\n    domain: string | null\n    plan?: string\n  }\n  timestamp?: string\n}\n\nexport interface CrawlerInfo {\n  /** Crawler name (e.g., 'GPTBot') */\n  name: string\n  /** Company that owns the crawler (e.g., 'OpenAI') */\n  company: string\n  /** Category of the crawler */\n  category: 'ai-training' | 'ai-assistant' | 'ai-search' | 'search-ai' | 'social-ai' | 'ai-extraction' | 'archival'\n}\n\nexport interface CrawlerVisit {\n  /** Full URL that was visited */\n  url: string\n  /** User agent string */\n  userAgent: string\n  /** ISO timestamp of the visit */\n  timestamp: string\n  /** Detected crawler information */\n  crawler?: CrawlerInfo\n  /** Additional metadata about the request */\n  metadata?: {\n    method?: string\n    statusCode?: number\n    responseTime?: number\n    pathname?: string\n    [key: string]: any\n  }\n}\n\nexport interface TrackingEvent extends Omit<CrawlerVisit, 'timestamp'> {}\n\nexport interface AutoTrackOptions {\n  /** Full URL that was visited */\n  url: string\n  /** User agent string (can be null) */\n  userAgent: string | null\n  /** HTTP method used */\n  method?: string\n  /** HTTP status code returned */\n  statusCode?: number\n  /** Response time in milliseconds */\n  responseTime?: number\n}\n\n// Add method signatures to the SplitAnalytics class\nexport interface ISplitAnalytics {\n  ping(): Promise<PingResponse>\n  track(visit: TrackingEvent): Promise<boolean>\n  autoTrack(options: AutoTrackOptions): Promise<boolean>\n  isAICrawler(userAgent: string | null): boolean\n  getCrawlerInfo(userAgent: string | null): CrawlerInfo | null\n}\n\n// ============================================================================\n// CRAWLER DETECTION - 20+ AI CRAWLERS\n// ============================================================================\n\nconst AI_CRAWLERS = {\n  // OpenAI (3 main crawlers)\n  'GPTBot': { name: 'GPTBot', company: 'OpenAI', category: 'ai-training' },\n  'ChatGPT-User': { name: 'ChatGPT-User', company: 'OpenAI', category: 'ai-assistant' },\n  'OAI-SearchBot': { name: 'OAI-SearchBot', company: 'OpenAI', category: 'ai-search' },\n  \n  // Anthropic\n  'Claude-Web': { name: 'Claude-Web', company: 'Anthropic', category: 'ai-assistant' },\n  'ClaudeBot': { name: 'ClaudeBot', company: 'Anthropic', category: 'ai-training' },\n  'anthropic-ai': { name: 'anthropic-ai', company: 'Anthropic', category: 'ai-training' },\n  \n  // Google/Alphabet\n  'Google-Extended': { name: 'Google-Extended', company: 'Google', category: 'ai-training' },\n  'Googlebot': { name: 'Googlebot', company: 'Google', category: 'search-ai' },\n  'Googlebot-Image': { name: 'Googlebot-Image', company: 'Google', category: 'search-ai' },\n  'Googlebot-News': { name: 'Googlebot-News', company: 'Google', category: 'search-ai' },\n  \n  // Microsoft\n  'Bingbot': { name: 'Bingbot', company: 'Microsoft', category: 'search-ai' },\n  'msnbot': { name: 'msnbot', company: 'Microsoft', category: 'search-ai' },\n  'BingPreview': { name: 'BingPreview', company: 'Microsoft', category: 'search-ai' },\n  \n  // Perplexity\n  'PerplexityBot': { name: 'PerplexityBot', company: 'Perplexity', category: 'ai-search' },\n  \n  // Meta/Facebook\n  'FacebookBot': { name: 'FacebookBot', company: 'Meta', category: 'social-ai' },\n  'facebookexternalhit': { name: 'facebookexternalhit', company: 'Meta', category: 'social-ai' },\n  'Meta-ExternalAgent': { name: 'Meta-ExternalAgent', company: 'Meta', category: 'ai-training' },\n  \n  // Other AI Search Engines\n  'YouBot': { name: 'YouBot', company: 'You.com', category: 'ai-search' },\n  'Neeva': { name: 'Neeva', company: 'Neeva', category: 'ai-search' },\n  'Phind': { name: 'Phind', company: 'Phind', category: 'ai-search' },\n  \n  // Chinese AI Companies\n  'Bytespider': { name: 'Bytespider', company: 'ByteDance', category: 'ai-training' },\n  'Baiduspider': { name: 'Baiduspider', company: 'Baidu', category: 'search-ai' },\n  'Sogou': { name: 'Sogou', company: 'Sogou', category: 'search-ai' },\n  \n  // E-commerce & Enterprise\n  'Amazonbot': { name: 'Amazonbot', company: 'Amazon', category: 'ai-assistant' },\n  'LinkedInBot': { name: 'LinkedInBot', company: 'LinkedIn', category: 'social-ai' },\n  'Twitterbot': { name: 'Twitterbot', company: 'Twitter', category: 'social-ai' },\n  \n  // Apple\n  'Applebot': { name: 'Applebot', company: 'Apple', category: 'search-ai' },\n  'Applebot-Extended': { name: 'Applebot-Extended', company: 'Apple', category: 'ai-training' },\n  \n  // Data Extraction & Analysis\n  'Diffbot': { name: 'Diffbot', company: 'Diffbot', category: 'ai-extraction' },\n  'DataForSeoBot': { name: 'DataForSeoBot', company: 'DataForSEO', category: 'ai-extraction' },\n  'SemrushBot': { name: 'SemrushBot', company: 'Semrush', category: 'ai-extraction' },\n  'AhrefsBot': { name: 'AhrefsBot', company: 'Ahrefs', category: 'ai-extraction' },\n  \n  // Common Crawl & Research\n  'CCBot': { name: 'CCBot', company: 'Common Crawl', category: 'ai-training' },\n  'ia_archiver': { name: 'ia_archiver', company: 'Internet Archive', category: 'archival' },\n  \n  // Other Notable AI Crawlers\n  'PetalBot': { name: 'PetalBot', company: 'Petal Search', category: 'search-ai' },\n  'SeznamBot': { name: 'SeznamBot', company: 'Seznam', category: 'search-ai' },\n  'Yandex': { name: 'YandexBot', company: 'Yandex', category: 'search-ai' },\n  'DuckDuckBot': { name: 'DuckDuckBot', company: 'DuckDuckGo', category: 'search-ai' },\n  'Qwantify': { name: 'Qwantify', company: 'Qwant', category: 'search-ai' },\n} as const\n\nfunction detectCrawler(userAgent: string | null) {\n  if (!userAgent) return null\n  \n  for (const [key, info] of Object.entries(AI_CRAWLERS)) {\n    if (userAgent.includes(key)) {\n      return info\n    }\n  }\n  \n  return null\n}\n\n// ============================================================================\n// CORE SPLIT ANALYTICS CLASS\n// ============================================================================\n\nexport class SplitAnalytics implements ISplitAnalytics {\n  private config: Required<SplitConfig>\n  \n  constructor(config: SplitConfig) {\n    if (!config.apiKey) {\n      throw new Error('[Split Analytics] API key is required')\n    }\n    \n    // Validate API key format\n    if (!config.apiKey.startsWith('split_live_') && !config.apiKey.startsWith('split_test_')) {\n      throw new Error('[Split Analytics] Invalid API key format. Keys should start with \"split_live_\" or \"split_test_\"')\n    }\n    \n    this.config = {\n      apiKey: config.apiKey,\n      apiEndpoint: config.apiEndpoint || (process.env.NODE_ENV === 'development' ? 'http://localhost:3000/api' : 'https://split.dev/api'),\n      debug: config.debug || false\n    }\n    \n    if (this.config.debug) {\n      console.log('[Split Analytics] Initialized with:', {\n        endpoint: this.config.apiEndpoint,\n        keyType: config.apiKey.startsWith('split_test_') ? 'test' : 'live',\n        debug: this.config.debug\n      })\n    }\n  }\n  \n  /**\n   * Test connection to Split Analytics API\n   */\n  async ping(): Promise<PingResponse> {\n    try {\n      // Validate API key format first\n      if (!this.config.apiKey.startsWith('split_live_') && !this.config.apiKey.startsWith('split_test_')) {\n        return {\n          status: 'error',\n          message: 'Invalid API key format. Keys should start with \"split_live_\" or \"split_test_\"'\n        }\n      }\n\n      const response = await fetch(`${this.config.apiEndpoint}/ping`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json',\n          'User-Agent': '@split.dev/analytics npm package'\n        }\n      })\n      \n      if (!response.ok) {\n        let errorMessage: string\n        \n        try {\n          const errorData = await response.json() as { message?: string; error?: string }\n          errorMessage = errorData.message || errorData.error || `HTTP ${response.status}`\n        } catch {\n          // Handle different HTTP status codes with helpful messages\n          switch (response.status) {\n            case 401:\n              errorMessage = 'Invalid API key. Check your key in the Split Analytics dashboard.'\n            case 403:\n              errorMessage = 'API key access denied. Verify your key has the correct permissions.'\n              break\n            case 404:\n              errorMessage = 'API endpoint not found. This might be a temporary issue with the Split Analytics service.'\n              break\n            case 429:\n              errorMessage = 'Rate limit exceeded. Please wait a moment and try again.'\n              break\n            case 500:\n              errorMessage = 'Split Analytics server error. Please try again later.'\n              break\n            default:\n              errorMessage = `HTTP ${response.status}: ${response.statusText}`\n          }\n        }\n        \n        if (this.config.debug) {\n          console.error('[Split Analytics] Ping failed:', {\n            status: response.status,\n            statusText: response.statusText,\n            url: `${this.config.apiEndpoint}/ping`,\n            apiKeyPrefix: this.config.apiKey.substring(0, 12) + '...'\n          })\n        }\n        \n        return {\n          status: 'error',\n          message: errorMessage\n        }\n      }\n      \n      const data = await response.json() as PingResponse\n      \n      if (this.config.debug) {\n        console.log('[Split Analytics] Ping successful:', data)\n      }\n      \n      return data\n    } catch (error) {\n      let message: string\n      \n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        message = 'Network error: Unable to connect to Split Analytics. Check your internet connection.'\n      } else if (error instanceof Error) {\n        message = `Connection error: ${error.message}`\n      } else {\n        message = 'Unknown connection error'\n      }\n      \n      if (this.config.debug) {\n        console.error('[Split Analytics] Ping failed:', {\n          error,\n          endpoint: `${this.config.apiEndpoint}/ping`,\n          apiKeyPrefix: this.config.apiKey.substring(0, 12) + '...'\n        })\n      }\n      \n      return { \n        status: 'error', \n        message,\n        timestamp: new Date().toISOString()\n      }\n    }\n  }\n  \n  /**\n   * Track a crawler visit\n   */\n  async track(visit: TrackingEvent): Promise<boolean> {\n    try {\n      const fullVisit: CrawlerVisit = {\n        ...visit,\n        timestamp: new Date().toISOString()\n      }\n      \n      if (this.config.debug) {\n        console.log('[Split Analytics] Tracking visit:', {\n          url: fullVisit.url,\n          crawler: fullVisit.crawler?.name,\n          userAgent: fullVisit.userAgent.substring(0, 50) + '...'\n        })\n      }\n      \n      const response = await fetch(`${this.config.apiEndpoint}/crawler-events`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.config.apiKey}`,\n          'Content-Type': 'application/json',\n          'User-Agent': '@split.dev/analytics npm package'\n        },\n        body: JSON.stringify({ events: [fullVisit] })\n      })\n      \n      if (!response.ok) {\n        if (this.config.debug) {\n          console.error('[Split Analytics] Track failed:', {\n            status: response.status,\n            statusText: response.statusText,\n            url: fullVisit.url,\n            crawler: fullVisit.crawler?.name\n          })\n        }\n        return false\n      }\n      \n      if (this.config.debug) {\n        console.log('[Split Analytics] Successfully tracked:', fullVisit.crawler?.name || 'unknown crawler')\n      }\n      \n      return true\n    } catch (error) {\n      if (this.config.debug) {\n        console.error('[Split Analytics] Track error:', {\n          error: error instanceof Error ? error.message : error,\n          url: visit.url,\n          crawler: visit.crawler?.name\n        })\n      }\n      return false\n    }\n  }\n  \n  /**\n   * Automatically detect and track crawler from request\n   */\n  async autoTrack(options: AutoTrackOptions): Promise<boolean> {\n    const crawler = detectCrawler(options.userAgent)\n    \n    if (!crawler) {\n      if (this.config.debug) {\n        console.log('[Split Analytics] No crawler detected in user agent:', options.userAgent?.substring(0, 50) + '...')\n      }\n      return false // Not a crawler, nothing to track\n    }\n    \n    if (this.config.debug) {\n      console.log('[Split Analytics] Auto-detected crawler:', crawler.name)\n    }\n    \n    return this.track({\n      url: options.url,\n      userAgent: options.userAgent || '',\n      crawler,\n      metadata: {\n        method: options.method,\n        statusCode: options.statusCode,\n        responseTime: options.responseTime\n      }\n    })\n  }\n\n  isAICrawler(userAgent: string | null): boolean {\n    return detectCrawler(userAgent) !== null\n  }\n\n  getCrawlerInfo(userAgent: string | null): CrawlerInfo | null {\n    return detectCrawler(userAgent)\n  }\n}\n\n// ============================================================================\n// CONVENIENCE FUNCTIONS\n// ============================================================================\n\n/**\n * Create a new Split Analytics instance\n */\nexport function createSplit(config: SplitConfig): SplitAnalytics {\n  return new SplitAnalytics(config)\n}\n\n/**\n * Quick ping function without creating an instance\n */\nexport async function ping(config: SplitConfig): Promise<PingResponse> {\n  const split = new SplitAnalytics(config)\n  return split.ping()\n}\n\n/**\n * Quick track function without creating an instance\n */\nexport async function track(config: SplitConfig, visit: TrackingEvent): Promise<boolean> {\n  const split = new SplitAnalytics(config)\n  return split.track(visit)\n}\n\n/**\n * Detect if a user agent is an AI crawler\n */\nexport function isAICrawler(userAgent: string | null): boolean {\n  return detectCrawler(userAgent) !== null\n}\n\n/**\n * Get crawler information from user agent\n */\nexport function getCrawlerInfo(userAgent: string | null): CrawlerInfo | null {\n  return detectCrawler(userAgent)\n}\n\n/**\n * Test utility to verify package installation and basic functionality\n * This is primarily for debugging and integration testing\n */\nexport async function testInstallation(config?: Partial<SplitConfig>): Promise<{\n  packageImport: boolean\n  crawlerDetection: boolean\n  apiConnection: boolean\n  apiConnectionDetails?: PingResponse\n}> {\n  const result = {\n    packageImport: true, // If we got here, import worked\n    crawlerDetection: false,\n    apiConnection: false,\n    apiConnectionDetails: undefined as PingResponse | undefined\n  }\n  \n  try {\n    // Test crawler detection\n    const testUserAgent = 'Mozilla/5.0 (compatible; GPTBot/1.0; +https://openai.com/gptbot)'\n    const isCrawler = isAICrawler(testUserAgent)\n    const crawlerInfo = getCrawlerInfo(testUserAgent)\n    \n    result.crawlerDetection = isCrawler && crawlerInfo?.name === 'GPTBot'\n    \n    // Test API connection if config provided\n    if (config?.apiKey) {\n      const pingResult = await ping({\n        apiKey: config.apiKey,\n        apiEndpoint: config.apiEndpoint,\n        debug: config.debug\n      })\n      \n      result.apiConnection = pingResult.status === 'ok'\n      result.apiConnectionDetails = pingResult\n    }\n  } catch (error) {\n    // Tests failed, but at least package import worked\n  }\n  \n  return result\n} "],"mappings":"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","names":["src_exports","__export","SplitAnalytics","createSplit","getCrawlerInfo","isAICrawler","ping","testInstallation","track","__toCommonJS","AI_CRAWLERS","detectCrawler","userAgent","key","info","config","response","errorMessage","errorData","data","error","message","visit","fullVisit","options","crawler","result","testUserAgent","isCrawler","crawlerInfo","pingResult"]}